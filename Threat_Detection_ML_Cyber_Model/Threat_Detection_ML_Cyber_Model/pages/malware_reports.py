import streamlit as st
import pickle
import joblib
import numpy as np
import pandas as pd
import sklearn.ensemble as ek
from sklearn.feature_selection import SelectFromModel
from sklearn.metrics import confusion_matrix, roc_curve, auc
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns

# Load the pre-trained model and features
model = joblib.load("model/model.pkl")
features = pickle.load(open("model/features.pkl", "rb"))

# Load the dataset
dataset = pd.read_csv('./datasets/dataset_PE.csv', sep=',', low_memory=False)
# Streamlit app
st.title('Malware Detection')

# Display dataset summary
st.subheader('Dataset Summary')
st.write(dataset.head())
st.write(dataset.describe())

# Display feature importance
st.subheader('Feature Importance')
feat_imp = pd.Series(model.feature_importances_, index=features)
feat_imp_sorted = feat_imp.sort_values(ascending=False)
st.bar_chart(feat_imp_sorted)

# Data preprocessing
X = dataset.drop(['ID', 'md5', 'legitimate'], axis=1).values
y = dataset['legitimate'].values

# Apply the same feature selection to X for prediction
extratrees = ek.ExtraTreesClassifier().fit(X, y)
model_selector = SelectFromModel(extratrees, prefit=True)
X_new = model_selector.transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size=0.2)

# Display accuracy
st.subheader('Model Accuracy')
accuracy = model.score(X_test, y_test)
st.write(f"Accuracy: {accuracy*100:.2f}%")

# False Positives and Negatives
res = model.predict(X_new)
mt = confusion_matrix(y, res)
false_positive_rate = (mt[0][1] / float(sum(mt[0]))) * 100
false_negative_rate = (mt[1][0] / float(sum(mt[1]))) * 100

st.subheader('Confusion Matrix')
st.write(pd.DataFrame(mt, columns=['Predicted 0', 'Predicted 1'], index=['Actual 0', 'Actual 1']))

st.write(f"False positive rate: {false_positive_rate:.2f}%")
st.write(f"False negative rate: {false_negative_rate:.2f}%")

# ROC Curve
st.subheader('ROC Curve')
fpr, tpr, _ = roc_curve(y, res)
roc_auc = auc(fpr, tpr)
plt.figure()
lw = 2
plt.plot(fpr, tpr, color='darkorange', lw=lw, label=f'ROC curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
st.pyplot(plt)

# Class Distribution
st.subheader('Class Distribution')
class_distribution = dataset['legitimate'].value_counts()
st.bar_chart(class_distribution)
